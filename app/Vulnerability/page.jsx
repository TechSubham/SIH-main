"use client";
import React, { useState } from "react";
import vulnerabilityData from "../../data/cisos_vulnerabilities.json";
import { AlertCircle } from 'lucide-react';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";

const VulnerabilityPopup = ({ vulnerability, isOpen, onClose }) => {
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
    <DialogContent className="sm:max-w-[425px]">
      <DialogHeader className="flex flex-col items-center">
      <AlertCircle className="w-20 h-20 text-red-500 mb-4" />
        <DialogTitle
          className={`text-xl font-semibold mb-2 p-2 rounded ${
            vulnerability.Severity === 'High' ? 'bg-red-200 text-red-700' :
            vulnerability.Severity === 'Medium' ? 'bg-yellow-200 text-yellow-700' :
            vulnerability.Severity === 'Critical' ? 'bg-purple-200 text-purple-800' : 'bg-gray-200 text-gray-800'
          }`}
        >
          {vulnerability.Severity}
        </DialogTitle>
      </DialogHeader>
      <DialogDescription className="text-center font-semibold ">
        <p className="mt-2">{vulnerability.Vulnerability || 'No description available.'}</p>
      </DialogDescription>
    </DialogContent>
  </Dialog>
  
  );
};

const Page = () => {
  const [sorting, setSorting] = useState([]);
  const [columnFilters, setColumnFilters] = useState([]);
  const [columnVisibility, setColumnVisibility] = useState({});
  const [rowSelection, setRowSelection] = useState({});
  const [selectedVulnerability, setSelectedVulnerability] = useState(null);
  const [isPopupOpen, setIsPopupOpen] = useState(false);
  
  const columns = [
    {
      id: "select",
      header: ({ table }) => (
        <Checkbox
        checked={table.getIsAllPageRowsSelected()}
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Select all"
          />
      ),
      cell: ({ row }) => (
        <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
        />
      ),
      enableSorting: false,
      enableHiding: false,
    },
    {
      accessorKey: "Vulnerability",
      header: "Vulnerability",
      cell: ({ row }) => {
        const vulnerability = row.original;
        return (
          <span 
          className="cursor-pointer hover:underline"
          onClick={() => {
            setSelectedVulnerability(vulnerability);
            setIsPopupOpen(true);
          }}
          >
            {vulnerability.Vulnerability}
          </span>
        );
      },
    },
    {
      accessorKey: "Severity",
      header: "Severity",
      cell: ({ row }) => {
        const severity = row.getValue("Severity");
        const getSeverityClass = (severity) => {
          switch (severity.toLowerCase()) {
            case "high":
              return "bg-red-100 text-red-800";
              case "medium":
                return "bg-yellow-100 text-yellow-800";
                case "critical":
                  return "bg-purple-100 text-purple-800";
                  default:
                    return "bg-gray-100 text-gray-800";
                  }
                };
                return (
                  <span className={`px-2 py-1 rounded ${getSeverityClass(severity)}`}>
            {severity}
          </span>
        );
      },
    },
  ];
  
  const table = useReactTable({
    data: vulnerabilityData,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
    },
  });
  
  
  return (
    <div className="font-serif pl-4 pr-4 mt-2 h-full lg:h-[100%] bg-slate-200 ">
      <div className="flex items-center justify-between mb-4">
        <Input
          placeholder="Filter vulnerabilities..."
          value={table.getColumn("Vulnerability")?.getFilterValue() ?? ""}
          onChange={(event) =>
            table.getColumn("Vulnerability")?.setFilterValue(event.target.value)
          }
          className="max-w-sm"
        />
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline">Columns</Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            {table
              .getAllColumns()
              .filter((column) => column.getCanHide())
              .map((column) => {
                return (
                  <DropdownMenuCheckboxItem
                    key={column.id}
                    className="capitalize"
                    checked={column.getIsVisible()}
                    onCheckedChange={(value) =>
                      column.toggleVisibility(!!value)
                    }
                  >
                    {column.id}
                  </DropdownMenuCheckboxItem>
                );
              })}
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
      <div className="rounded-xl shadow-2xl bg-white overflow-hidden">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => {
                  return (
                    <TableHead
                      className="bg-blue-600 text-white"
                      key={header.id}
                    >
                      {header.isPlaceholder
                        ? null
                        : flexRender(
                            header.column.columnDef.header,
                            header.getContext()
                          )}
                    </TableHead>
                  );
                })}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow
                  className="hover:bg-gray-300"
                  key={row.id}
                  data-state={row.getIsSelected() && "selected"}
                >
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>
                      {flexRender(
                        cell.column.columnDef.cell,
                        cell.getContext()
                      )}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell
                  colSpan={columns.length}
                  className="h-24 text-center"
                >
                  No results.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
      <div className="flex items-center justify-end space-x-2 py-4">
        <div className="flex-1 text-sm text-gray-500 lg:block hidden md:block">
          {table.getFilteredSelectedRowModel().rows.length} of{" "}
          {table.getFilteredRowModel().rows.length} row(s) selected.
        </div>
        <div className="space-x-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
            className="px-8 relative right-40 sm:right-10 text-sm bg-white border border-gray-300 rounded-md shadow-sm hover:bg-yellow-500 disabled:bg-gray-200"
          >
            Previous
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
            className="px-8 relative right-36 sm:right-8 text-sm bg-white border border-gray-300 rounded-md shadow-sm hover:bg-green-500 disabled:bg-gray-200"
          >
            Next
          </Button>
        </div>
      </div>
      {selectedVulnerability && (
        <VulnerabilityPopup
          vulnerability={selectedVulnerability}
          isOpen={isPopupOpen}
          onClose={() => {
            setIsPopupOpen(false);
            setSelectedVulnerability(null);
          }}
        />
      )}
    </div>
    // </div>
  );
};

export default Page;