"use client";
import React, { useState, useEffect } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";

import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table";
import { Checkbox } from "@/components/ui/checkbox";
import VulnerabilityPopup from "@/app/(Dashboard)/Dashboard/Vulnerability/VulnerabilityPopup";
import { ChevronDown } from "lucide-react";

const Page = () => {
  const [sorting, setSorting] = useState([]);
  const [columnFilters, setColumnFilters] = useState([]);
  const [columnVisibility, setColumnVisibility] = useState({});
  const [rowSelection, setRowSelection] = useState({});
  const [selectedVulnerability, setSelectedVulnerability] = useState(null);
  const [isPopupOpen, setIsPopupOpen] = useState(false);
  const [vulnerabilityData, setVulnerabilityData] = useState([]);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchVulnerabilities = async () => {
      try {
        const response = await fetch("/api/vulnerability");
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        console.log(`Received ${data.length} vulnerabilities from API`);
        console.log("Sample vulnerability:", data[0]);
        setVulnerabilityData(data);
      } catch (error) {
        console.error("Error fetching vulnerabilities:", error);
        setError(error.message);
      }
    };

    fetchVulnerabilities();
  }, []);

  const columns = [
    {
      id: "select",
      header: ({ table }) => (
        <Checkbox
          checked={table.getIsAllPageRowsSelected()}
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Select all"
        />
      ),
      cell: ({ row }) => (
        <Checkbox
          checked={row.getIsSelected()}
          onCheckedChange={(value) => row.toggleSelected(!!value)}
          aria-label="Select row"
        />
      ),
      enableSorting: false,
      enableHiding: false,
    },
    {
      accessorKey: "cve_id",
      header: "CVE ID",
      cell: ({ row }) => {
        const vulnerability = row.original;
        return (
          <span
            className="cursor-pointer hover:underline text-blue-600"
            onClick={() => {
              setSelectedVulnerability(vulnerability);
              setIsPopupOpen(true);
            }}
          >
            {vulnerability.cve_id}
          </span>
        );
      },
    },
    {
      accessorKey: "description",
      header: "Description",
      cell: ({ row }) => {
        const description = row.getValue("description");
        return (
          <span
            className="truncate max-w-[150px] sm:max-w-xs block"
            title={description}
          >
            {description}
          </span>
        );
      },
    },
    {
      accessorKey: "published_date",
      header: "Published Date",
      cell: ({ row }) => {
        const date = row.getValue("published_date");
        if (!date) return "N/A";

        const [day, month, year] = date.split("/");
        return new Date(`${year}-${month}-${day}`).toLocaleDateString();
        F;
      },
    },
    {
      accessorKey: "severity",
      header: "Severity",
      cell: ({ row }) => {
        const severity = row.getValue("severity") || "null";
        const getSeverityClass = (severity) => {
          switch (severity?.toLowerCase()) {
            case "important":
              return "bg-red-100 text-red-800";
            case "moderate":
              return "bg-yellow-100 text-yellow-800";
            case "high":
              return "bg-purple-100 text-purple-800";
            case "medium":
              return "bg-green-100 text-green-800";
            case "critical":
              return "bg-red-100 text-red-800";
            default:
              return "bg-gray-100 text-gray-800";
          }
        };
        return (
          <span
            className={`px-2 py-1 rounded ${getSeverityClass(
              severity
            )} text-xs sm:text-sm`}
          >
            {severity}
          </span>
        );
      },
    },
  ];

  const table = useReactTable({
    data: vulnerabilityData,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
    },
  });

  return (
    <div className={`h-full flex flex-col overflow-auto`}>
      {error && <div className="text-red-500">Error: {error}</div>}
      <div className="flex flex-col gap-4 flex-1 h-full">
        <div className="flex flex-col sm:flex-row items-center justify-between gap-4">
          <Input
            placeholder="Filter vulnerabilities..."
            value={table.getColumn("cve_id")?.getFilterValue() ?? ""}
            onChange={(event) =>
              table.getColumn("cve_id")?.setFilterValue(event.target.value)
            }
            className="max-w-sm"
          />
          <div className="flex gap-2">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" className="ml-auto">
                  Columns <ChevronDown className="ml-2 h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                {table
                  .getAllColumns()
                  .filter((column) => column.getCanHide())
                  .map((column) => {
                    return (
                      <DropdownMenuCheckboxItem
                        key={column.id}
                        className="capitalize"
                        checked={column.getIsVisible()}
                        onCheckedChange={(value) =>
                          column.toggleVisibility(!!value)
                        }
                      >
                        {column.id}
                      </DropdownMenuCheckboxItem>
                    );
                  })}
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>

        <div className="flex flex-col h-full w-full bg-white shadow-2xl rounded-[0.75rem] overflow-hidden">
          <div className="flex-none overflow-hidden">
            <Table>
              <TableHeader>
                {table.getHeaderGroups().map((headerGroup) => (
                  <TableRow key={headerGroup.id}>
                    {headerGroup.headers.map((header) => (
                      <TableHead
                        key={header.id}
                        className="bg-blue-600 text-white sticky top-0 z-10"
                      >
                        {header.isPlaceholder
                          ? null
                          : flexRender(
                              header.column.columnDef.header,
                              header.getContext()
                            )}
                      </TableHead>
                    ))}
                  </TableRow>
                ))}
              </TableHeader>
            </Table>
          </div>
          <div className="flex-grow overflow-auto">
            <Table>
              <TableBody>
                {table.getRowModel().rows?.length ? (
                  table.getRowModel().rows.map((row) => (
                    <TableRow
                      key={row.id}
                      data-state={row.getIsSelected() && "selected"}
                    >
                      {row.getVisibleCells().map((cell) => (
                        <TableCell key={cell.id}>
                          {flexRender(
                            cell.column.columnDef.cell,
                            cell.getContext()
                          )}
                        </TableCell>
                      ))}
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell
                      colSpan={columns.length}
                      className="h-24 text-center"
                    >
                      No results.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </div>
        </div>

        <div className="flex flex-col sm:flex-row items-center justify-between gap-4">
          <div className="text-sm text-gray-500">
            {table.getFilteredSelectedRowModel().rows.length} of{" "}
            {table.getFilteredRowModel().rows.length} row(s) selected.
          </div>
          <div className="flex gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => table.previousPage()}
              disabled={!table.getCanPreviousPage()}
            >
              Previous
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => table.nextPage()}
              disabled={!table.getCanNextPage()}
            >
              Next
            </Button>
          </div>
        </div>
      </div>
      {selectedVulnerability && (
        <VulnerabilityPopup
          vulnerability={selectedVulnerability}
          isOpen={isPopupOpen}
          onClose={() => {
            setIsPopupOpen(false);
            setSelectedVulnerability(null);
          }}
        />
      )}
    </div>
  );
};

export default Page;
