"use client";
import React, { useState, useEffect, useMemo } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table";
import { Checkbox } from "@/components/ui/checkbox";
import VulnerabilityPopup from "@/app/(Dashboard)/Dashboard/Vulnerability/VulnerabilityPopup";
import { ChevronDown, Download, Search } from "lucide-react";

const Page = () => {
  const [sorting, setSorting] = useState([]);
  const [columnFilters, setColumnFilters] = useState([]);
  const [columnVisibility, setColumnVisibility] = useState({});
  const [rowSelection, setRowSelection] = useState({});
  const [selectedVulnerability, setSelectedVulnerability] = useState(null);
  const [isPopupOpen, setIsPopupOpen] = useState(false);
  const [vulnerabilityData, setVulnerabilityData] = useState([]);
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [globalFilter, setGlobalFilter] = useState("");

  useEffect(() => {
    const fetchVulnerabilities = async () => {
      try {
        setIsLoading(true);
        const response = await fetch("/api/vulnerability");
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        setVulnerabilityData(data);
      } catch (error) {
        console.error("Error fetching vulnerabilities:", error);
        setError(error.message);
      } finally {
        setIsLoading(false);
      }
    };

    fetchVulnerabilities();
  }, []);

  const columns = useMemo(
    () => [
      {
        id: "select",
        header: ({ table }) => (
          <Checkbox
            checked={table.getIsAllPageRowsSelected()}
            onCheckedChange={(value) =>
              table.toggleAllPageRowsSelected(!!value)
            }
            aria-label="Select all"
          />
        ),
        cell: ({ row }) => (
          <Checkbox
            checked={row.getIsSelected()}
            onCheckedChange={(value) => row.toggleSelected(!!value)}
            aria-label="Select row"
          />
        ),
        enableSorting: false,
        enableHiding: false,
      },
      {
        accessorKey: "cve_id",
        header: "CVE ID",
        cell: ({ row }) => {
          const vulnerability = row.original;
          return (
            <span
              className="cursor-pointer hover:underline text-blue-600"
              onClick={() => {
                setSelectedVulnerability(vulnerability);
                setIsPopupOpen(true);
              }}
            >
              {vulnerability.cve_id}
            </span>
          );
        },
      },
      {
        accessorKey: "description",
        header: "Source",
        cell: ({ row }) => {
          const description = row.getValue("description");
          return (
            <span
              className="truncate max-w-[150px] sm:max-w-xs block"
              title={description}
            >
              {description}
            </span>
          );
        },
      },
      {
        accessorKey: "published_date",
        header: "Published Date",
        cell: ({ row }) => {
          const date = row.getValue("published_date");
          if (!date) return "N/A";
          const [day, month, year] = date.split("/");
          return new Date(`${year}-${month}-${day}`).toLocaleDateString();
        },
      },
      {
        accessorKey: "severity",
        header: "Severity",
        cell: ({ row }) => {
          const severity = row.getValue("severity") || "null";
          const getSeverityClass = (severity) => {
            switch (severity?.toLowerCase()) {
              case "important":
                return "bg-red-100 text-red-800";
              case "moderate":
                return "bg-yellow-100 text-yellow-800";
              case "high":
                return "bg-purple-100 text-purple-800";
              case "medium":
                return "bg-green-100 text-green-800";
              case "critical":
                return "bg-red-100 text-red-800";
              default:
                return "bg-gray-100 text-gray-800";
            }
          };
          return (
            <span
              className={`px-2 py-1 rounded ${getSeverityClass(
                severity
              )} text-xs sm:text-sm`}
            >
              {severity}
            </span>
          );
        },
      },
    ],
    []
  );

  const table = useReactTable({
    data: vulnerabilityData,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    globalFilterFn: (row, columnId, filterValue) => {
      const safeValue = (() => {
        const value = row.getValue(columnId);
        return typeof value === "number" ? String(value) : value ?? "";
      })();
      return safeValue
        .toLowerCase()
        .includes((filterValue ?? "").toLowerCase());
    },
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
      globalFilter,
    },
    onGlobalFilterChange: setGlobalFilter,
  });

  const exportData = (format) => {
    const selectedData = table
      .getSelectedRowModel()
      .rows.map((row) => row.original);
    let content;
    let filename;

    if (format === "json") {
      content = JSON.stringify(selectedData, null, 2);
      filename = "vulnerabilities.json";
    } else if (format === "csv") {
      const headers = columns.map((column) => column.header).join(",");
      const rows = selectedData.map((row) =>
        columns.map((column) => row[column.accessorKey]).join(",")
      );
      content = [headers, ...rows].join("\n");
      filename = "vulnerabilities.csv";
    }

    const blob = new Blob([content], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = filename;
    link.click();
    URL.revokeObjectURL(url);
  };

  const SkeletonRow = () => (
    <TableRow>
      {columns.map((column, index) => (
        <TableCell key={index}>
          <div className="h-4 bg-gray-200 rounded animate-pulse"></div>
        </TableCell>
      ))}
    </TableRow>
  );

  return (
    <div className="h-full flex flex-col overflow-auto p-4">
      {error && <div className="text-red-500 mb-4">Error: {error}</div>}
      <div className="flex flex-col gap-4 flex-1 h-full">
        <div className="flex flex-col sm:flex-row items-center justify-between gap-4">
          <div className="flex-grow flex items-center w-full max-w-md">
            <Input
              placeholder="Search all fields..."
              value={globalFilter ?? ""}
              onChange={(event) => setGlobalFilter(event.target.value)}
              className="w-full"
            />
            <Search className="ml-2 h-4 w-4 text-gray-400" />
          </div>
          <div className="flex gap-2">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline">
                  Columns <ChevronDown className="ml-2 h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                {table
                  .getAllColumns()
                  .filter((column) => column.getCanHide())
                  .map((column) => (
                    <DropdownMenuCheckboxItem
                      key={column.id}
                      className="capitalize"
                      checked={column.getIsVisible()}
                      onCheckedChange={(value) =>
                        column.toggleVisibility(!!value)
                      }
                    >
                      {column.id == "cve_id"
                        ? "CVE ID"
                        : column.id == "description"
                        ? "Source"
                        : column.id == "published_date"
                        ? "Published Date"
                        : column.id}
                    </DropdownMenuCheckboxItem>
                  ))}
              </DropdownMenuContent>
            </DropdownMenu>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline">
                  Export <Download className="ml-2 h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent>
                <DropdownMenuCheckboxItem onClick={() => exportData("json")}>
                  Export as JSON
                </DropdownMenuCheckboxItem>
                <DropdownMenuCheckboxItem onClick={() => exportData("csv")}>
                  Export as CSV
                </DropdownMenuCheckboxItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>

        <div className="flex flex-wrap gap-2 mb-4">
          {table
            .getAllColumns()
            .filter((column) => column.getCanFilter())
            .map((column) => {
              const columnFilterValue = column.getFilterValue();
              return (
                <div key={column.id} className="flex items-center space-x-2">
                  <label htmlFor={column.id} className="text-xs text-nowrap font-medium">
                    {column.id == "cve_id"
                      ? "CVE ID"
                      : column.id == "description"
                      ? "Source"
                      : column.id == "published_date"
                      ? "Published Date"
                      : column.id}
                    :
                  </label>
                  {column.id === "severity" ? (
                    <Select
                      value={columnFilterValue ?? null}
                      onValueChange={(value) => column.setFilterValue(value)}
                    >
                      <SelectTrigger className="w-[180px]">
                        <SelectValue placeholder="Select severity" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value={null}>All</SelectItem>
                        <SelectItem value="important">Important</SelectItem>
                        <SelectItem value="moderate">Moderate</SelectItem>
                        <SelectItem value="high">High</SelectItem>
                        <SelectItem value="medium">Medium</SelectItem>
                        <SelectItem value="critical">Critical</SelectItem>
                      </SelectContent>
                    </Select>
                  ) : (
                    <Input
                      id={column.id}
                      value={columnFilterValue ?? ""}
                      onChange={(event) =>
                        column.setFilterValue(event.target.value)
                      }
                      className="max-w-sm h-8"
                      placeholder={`Filter ${
                        column.id == "cve_id"
                          ? "CVE ID"
                          : column.id == "description"
                          ? "Source"
                          : column.id == "published_date"
                          ? "Published Date"
                          : column.id
                      }...`}
                    />
                  )}
                </div>
              );
            })}
        </div>

        <div className="flex flex-col h-full w-full bg-white rounded-[0.75rem] overflow-hidden">
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                {table.getHeaderGroups().map((headerGroup) => (
                  <TableRow key={headerGroup.id}>
                    {headerGroup.headers.map((header) => (
                      <TableHead
                        key={header.id}
                        className="bg-blue-600 text-white sticky top-0 z-10"
                        style={{ width: header.getSize() }}
                      >
                        {header.isPlaceholder
                          ? null
                          : flexRender(
                              header.column.columnDef.header,
                              header.getContext()
                            )}
                      </TableHead>
                    ))}
                  </TableRow>
                ))}
              </TableHeader>
              <TableBody>
                {isLoading ? (
                  Array.from({ length: 10 }).map((_, index) => (
                    <SkeletonRow key={index} />
                  ))
                ) : table.getRowModel().rows?.length ? (
                  table.getRowModel().rows.map((row) => (
                    <TableRow
                      key={row.id}
                      data-state={row.getIsSelected() && "selected"}
                    >
                      {row.getVisibleCells().map((cell) => (
                        <TableCell
                          key={cell.id}
                          style={{ width: cell.column.getSize() }}
                        >
                          {flexRender(
                            cell.column.columnDef.cell,
                            cell.getContext()
                          )}
                        </TableCell>
                      ))}
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell
                      colSpan={columns.length}
                      className="h-24 text-center"
                    >
                      No results.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </div>
        </div>

        <div className="flex flex-col sm:flex-row items-center justify-between gap-4 mt-4">
          <div className="text-sm text-gray-500">
            {table.getFilteredSelectedRowModel().rows.length} of{" "}
            {table.getFilteredRowModel().rows.length} row(s) selected.
          </div>
          <div className="flex gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => table.previousPage()}
              disabled={!table.getCanPreviousPage()}
            >
              Previous
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => table.nextPage()}
              disabled={!table.getCanNextPage()}
            >
              Next
            </Button>
          </div>
        </div>
      </div>
      {selectedVulnerability && (
        <VulnerabilityPopup
          vulnerability={selectedVulnerability}
          isOpen={isPopupOpen}
          onClose={() => {
            setIsPopupOpen(false);
            setSelectedVulnerability(null);
          }}
        />
      )}
    </div>
  );
};

export default Page;
